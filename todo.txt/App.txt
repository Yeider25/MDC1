App.js:
const express = require('express');
const bodyParser = require("body-parser");
const mysql = require('mysql2/promise');
const app = express();

app.use(bodyParser.urlencoded({extended:true}));
app.use(bodyParser.json());
app.use(express.static(__dirname + '/../Vistas'));

const db = mysql.createPool({
    host:'localhost',
    user:"root",
    password:"",
    database:"con"
});


app.post('/Crear', async (req, res) => {
    const {Nombre, TipoDocumento, Documento} = req.body;
    try {
        const [indicador] = await db.query('SELECT * FROM usuarios WHERE Documento=? AND TipoDocumento=?', [Documento, TipoDocumento]);
        if (indicador.length > 0) {
            res.status(409).send(`<script>alert('Ya existe este usuario');window.location.href="/Vistas/Registro.html";</script>`);
        } else {
            await db.query('INSERT INTO usuarios (Nombre, TipoDocumento, Documento, Rol) VALUES (?, ?, ?, ?)', [Nombre, TipoDocumento, Documento, "usuario"]);
            res.status(201).send(`<script>alert('Su registro fue completado');window.location.href='Iniciodesesion.html';</script>`);
        }
    } catch(error) {
        console.error('Error en el servidor:', error);
        res.status(500).send("<script>alert('Error en el servidor');window.location.href='Iniciodesesion.html';</script>");
    }
});

app.post("/Iniciar", async (req, res) => {
    const {TipoDocumento, Documento} = req.body;
    try {
        const [indicador] = await db.query('SELECT * FROM usuarios WHERE Documento=? AND TipoDocumento=?', [Documento, TipoDocumento]);
        if (indicador.length > 0) {
            res.redirect(`/Bienvenida?usuario=${indicador[0].Nombre}`);
        } else {
            res.status(401).send("No existes en la base de datos");
        }
    } catch(error) {
        console.error("Error en el servidor:", error);
        res.status(500).send("<script>alert('Error en el servidor');window.location.href='Iniciodesesion.html';</script>");
    }
});

app.get('/Bienvenida', (req, res) => {
    res.sendFile('Usuarios.html', { root: __dirname + '/../Vistas' });
});

app.post('/obtener-servicios-usuario', async (req, res) => {
    try {
        const [serviciosData] = await db.query(`
            SELECT Nombre 
            FROM servicios
        `);

        res.json({ servicios: serviciosData.map(row => row.Nombre) });
    } catch (error) {
        console.log('Error en el servidor:', error);
        res.status(500).send('Error en el servidor');
    }
});

app.post('/guardar-servicios-usuario', async (req, res) => {
    const { usuario, servicios, fecha } = req.body;
    try {
        const [usuarioRow] = await db.query('SELECT Id_usuario FROM usuarios WHERE Nombre = ?', [usuario]);
        const userId = usuarioRow[0].Id_usuario;

    for (const servicio of servicios) {
            await db.query('INSERT INTO solicitudes (Id_usuario, Codigo_servicio, Fecha) VALUES (?, (SELECT Codigo_servicio FROM servicios WHERE Nombre = ?), ?)', [userId, servicio, fecha]);
        }
        res.status(201).send('Servicios guardados correctamente');
    } catch (error) {
        console.error('Error en el servidor:', error);
        res.status(500).send('Error en el servidor');
    }
});

app.post('/obtener-solicitudes-usuario', async (req, res) => {
    const { usuario } = req.body;
    try {
        const [usuarioRow] = await db.query('SELECT Id_usuario FROM usuarios WHERE Nombre = ?', [usuario]);
        const userId = usuarioRow[0].Id_usuario;
        const [solicitudesData] = await db.query(`
            SELECT s.ID_solicitud, s.Fecha, se.Nombre 
            FROM solicitudes s 
            INNER JOIN servicios se ON s.Codigo_servicio = se.Codigo_servicio 
            WHERE s.Id_usuario = ?`, [userId]);
        res.json({ solicitudes: solicitudesData });
    } catch (error) {
        console.error('Error en el servidor:', error);
        res.status(500).send('Error en el servidor');
    }
});

app.post('/borrar-solicitud', async (req, res) => {
    const { solicitudId } = req.body;
    try {
        await db.query('DELETE FROM solicitudes WHERE ID_solicitud = ?', [solicitudId]);
        res.status(200).send('Solicitud borrada correctamente');
    } catch (error) {
        console.error('Error en el servidor:', error);
        res.status(500).send('Error en el servidor');
    }
});

app.listen(3000, () => {
    console.log("Servidor Node.js escuchando");
});